# -*- coding: utf-8 -*-
"""MinHashing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sLuFSk1g2EMVL5DZ0zQdpBM9t98Ttfki
"""

s1="He moved from London Ontario to London England"
s2="He moved from London England to London Ontario"
s3="He moved from England to London Ontario"
k=3

shingles=[]
s1=s1.split(" ")
s2=s2.split(" ")
s3=s3.split(" ")

s=""
for i in range(k):
  if i!=k-1:
    s+=s1[i]+" "
  else:
    s+=s1[i]
if s not in shingles:
  shingles.append(s)

for i in range(k,len(s1)):
  L=s.split(" ")
  #print(L)
  L.append(s1[i])
  del L[0]
  print(L)
  s=" ".join(L)
  if s not in shingles:
    shingles.append(s)

shingles

s=""
for i in range(k):
  if i!=k-1:
    s+=s2[i]+" "
  else:
    s+=s2[i]
if s not in shingles:
  shingles.append(s)

shingles

for i in range(k,len(s2)):
  L=s.split(" ")
  #print(L)
  L.append(s2[i])
  del L[0]
  print(L)
  s=" ".join(L)
  if s not in shingles:
    shingles.append(s)

shingles

s=""
for i in range(k):
  if i!=k-1:
    s+=s3[i]+" "
  else:
    s+=s3[i]
if s not in shingles:
  shingles.append(s)

for i in range(k,len(s3)):
  L=s.split(" ")
  #print(L)
  L.append(s3[i])
  del L[0]
  print(L)
  s=" ".join(L)
  if s not in shingles:
    shingles.append(s)

shingles

docset=["He moved from London Ontario to London England","He moved from London England to London Ontario","He moved from England to London Ontario"]

docset[0]

import numpy as np
mat=np.zeros((len(shingles),len(docset)))
for i in range(len(shingles)):
  for j in range(len(docset)):
    if shingles[i] in docset[j]:
      mat[i][j]=1

mat

randomlist=[]
for i in range(len(shingles)):
  randomlist.append(i)

randomlist

import random
random.shuffle(randomlist)

randomlist

mat1=np.zeros((len(shingles),len(docset)))
for i in range(len(mat)):
  mat1[i]=mat[randomlist[i]]

mat1

for i in range(len(mat[0])):
  for j in range(len(mat)):
    if mat1[i][j]==1:
      print(j+1)
      i+=1
      break

def printseq(mat):
  randomlist=[]
  for i in range(len(shingles)):
    randomlist.append(i)
  random.shuffle(randomlist)
  mat1=np.zeros((len(shingles),len(docset)))
  for i in range(len(mat)):
    mat1[i]=mat[randomlist[i]]
  #print(mat)
  listd=[]
  for i in range(len(mat[0])):
    for j in range(len(mat)):
      if mat1[i][j]==1:
        #print(j+1)
        listd.append(j+1)
        i+=1
        break
  print(listd)
  return [mat1,listd]

printseq(mat)

printseq(printseq(mat))

listsim=[]
for i in range(3):
  result=printseq(mat)
  mat=result[0]
  listsim.append(result[1])

listsim

for i in range(len(listsim)):
  for j in range(i+1,len(listsim)):
    num=0
    if listsim[i][0]==listsim[j][0]:
      num+=1
    if listsim[i][1]==listsim[j][1]:
      num+=1
    if listsim[i][2]==listsim[j][2]:
      num+=1
    print(i,"&",j)
    print(num,"/",3)

